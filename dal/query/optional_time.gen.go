// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/scutrobotlab/HR/dal/model"
)

func newOptionalTime(db *gorm.DB) optionalTime {
	_optionalTime := optionalTime{}

	_optionalTime.optionalTimeDo.UseDB(db)
	_optionalTime.optionalTimeDo.UseModel(&model.OptionalTime{})

	tableName := _optionalTime.optionalTimeDo.TableName()
	_optionalTime.ALL = field.NewField(tableName, "*")
	_optionalTime.ID = field.NewUint(tableName, "id")
	_optionalTime.CreatedAt = field.NewTime(tableName, "created_at")
	_optionalTime.UpdatedAt = field.NewTime(tableName, "updated_at")
	_optionalTime.DeletedAt = field.NewField(tableName, "deleted_at")
	_optionalTime.TheDate = field.NewTime(tableName, "the_date")
	_optionalTime.TheTime = field.NewTime(tableName, "the_time")
	_optionalTime.TheLocation = field.NewString(tableName, "the_location")
	_optionalTime.Group = field.NewString(tableName, "group")
	_optionalTime.IntentRank = field.NewInt16(tableName, "intent_rank")

	_optionalTime.fillFieldMap()

	return _optionalTime
}

type optionalTime struct {
	optionalTimeDo optionalTimeDo

	ALL         field.Field
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	TheDate     field.Time
	TheTime     field.Time
	TheLocation field.String
	Group       field.String
	IntentRank  field.Int16

	fieldMap map[string]field.Expr
}

func (o optionalTime) Table(newTableName string) *optionalTime {
	o.optionalTimeDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o optionalTime) As(alias string) *optionalTime {
	o.optionalTimeDo.DO = *(o.optionalTimeDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *optionalTime) updateTableName(table string) *optionalTime {
	o.ALL = field.NewField(table, "*")
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.TheDate = field.NewTime(table, "the_date")
	o.TheTime = field.NewTime(table, "the_time")
	o.TheLocation = field.NewString(table, "the_location")
	o.Group = field.NewString(table, "group")
	o.IntentRank = field.NewInt16(table, "intent_rank")

	o.fillFieldMap()

	return o
}

func (o *optionalTime) WithContext(ctx context.Context) *optionalTimeDo {
	return o.optionalTimeDo.WithContext(ctx)
}

func (o optionalTime) TableName() string { return o.optionalTimeDo.TableName() }

func (o optionalTime) Alias() string { return o.optionalTimeDo.Alias() }

func (o *optionalTime) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *optionalTime) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["the_date"] = o.TheDate
	o.fieldMap["the_time"] = o.TheTime
	o.fieldMap["the_location"] = o.TheLocation
	o.fieldMap["group"] = o.Group
	o.fieldMap["intent_rank"] = o.IntentRank
}

func (o optionalTime) clone(db *gorm.DB) optionalTime {
	o.optionalTimeDo.ReplaceDB(db)
	return o
}

type optionalTimeDo struct{ gen.DO }

func (o optionalTimeDo) Debug() *optionalTimeDo {
	return o.withDO(o.DO.Debug())
}

func (o optionalTimeDo) WithContext(ctx context.Context) *optionalTimeDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o optionalTimeDo) Clauses(conds ...clause.Expression) *optionalTimeDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o optionalTimeDo) Returning(value interface{}, columns ...string) *optionalTimeDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o optionalTimeDo) Not(conds ...gen.Condition) *optionalTimeDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o optionalTimeDo) Or(conds ...gen.Condition) *optionalTimeDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o optionalTimeDo) Select(conds ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o optionalTimeDo) Where(conds ...gen.Condition) *optionalTimeDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o optionalTimeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *optionalTimeDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o optionalTimeDo) Order(conds ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o optionalTimeDo) Distinct(cols ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o optionalTimeDo) Omit(cols ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o optionalTimeDo) Join(table schema.Tabler, on ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o optionalTimeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o optionalTimeDo) RightJoin(table schema.Tabler, on ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o optionalTimeDo) Group(cols ...field.Expr) *optionalTimeDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o optionalTimeDo) Having(conds ...gen.Condition) *optionalTimeDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o optionalTimeDo) Limit(limit int) *optionalTimeDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o optionalTimeDo) Offset(offset int) *optionalTimeDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o optionalTimeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *optionalTimeDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o optionalTimeDo) Unscoped() *optionalTimeDo {
	return o.withDO(o.DO.Unscoped())
}

func (o optionalTimeDo) Create(values ...*model.OptionalTime) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o optionalTimeDo) CreateInBatches(values []*model.OptionalTime, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o optionalTimeDo) Save(values ...*model.OptionalTime) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o optionalTimeDo) First() (*model.OptionalTime, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OptionalTime), nil
	}
}

func (o optionalTimeDo) Take() (*model.OptionalTime, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OptionalTime), nil
	}
}

func (o optionalTimeDo) Last() (*model.OptionalTime, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OptionalTime), nil
	}
}

func (o optionalTimeDo) Find() ([]*model.OptionalTime, error) {
	result, err := o.DO.Find()
	return result.([]*model.OptionalTime), err
}

func (o optionalTimeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OptionalTime, err error) {
	buf := make([]*model.OptionalTime, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o optionalTimeDo) FindInBatches(result *[]*model.OptionalTime, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o optionalTimeDo) Attrs(attrs ...field.AssignExpr) *optionalTimeDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o optionalTimeDo) Assign(attrs ...field.AssignExpr) *optionalTimeDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o optionalTimeDo) Joins(fields ...field.RelationField) *optionalTimeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o optionalTimeDo) Preload(fields ...field.RelationField) *optionalTimeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o optionalTimeDo) FirstOrInit() (*model.OptionalTime, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OptionalTime), nil
	}
}

func (o optionalTimeDo) FirstOrCreate() (*model.OptionalTime, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OptionalTime), nil
	}
}

func (o optionalTimeDo) FindByPage(offset int, limit int) (result []*model.OptionalTime, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o optionalTimeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o *optionalTimeDo) withDO(do gen.Dao) *optionalTimeDo {
	o.DO = *do.(*gen.DO)
	return o
}
