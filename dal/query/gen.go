// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q            = new(Query)
	Admin        *admin
	Admit        *admit
	Answer       *answer
	Applicant    *applicant
	Intent       *intent
	OptionalTime *optionalTime
	Question     *question
	Remark       *remark
	Score        *score
	Setting      *setting
	Standard     *standard
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	Admin = &Q.Admin
	Admit = &Q.Admit
	Answer = &Q.Answer
	Applicant = &Q.Applicant
	Intent = &Q.Intent
	OptionalTime = &Q.OptionalTime
	Question = &Q.Question
	Remark = &Q.Remark
	Score = &Q.Score
	Setting = &Q.Setting
	Standard = &Q.Standard
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        newAdmin(db),
		Admit:        newAdmit(db),
		Answer:       newAnswer(db),
		Applicant:    newApplicant(db),
		Intent:       newIntent(db),
		OptionalTime: newOptionalTime(db),
		Question:     newQuestion(db),
		Remark:       newRemark(db),
		Score:        newScore(db),
		Setting:      newSetting(db),
		Standard:     newStandard(db),
	}
}

type Query struct {
	db *gorm.DB

	Admin        admin
	Admit        admit
	Answer       answer
	Applicant    applicant
	Intent       intent
	OptionalTime optionalTime
	Question     question
	Remark       remark
	Score        score
	Setting      setting
	Standard     standard
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Admin:        q.Admin.clone(db),
		Admit:        q.Admit.clone(db),
		Answer:       q.Answer.clone(db),
		Applicant:    q.Applicant.clone(db),
		Intent:       q.Intent.clone(db),
		OptionalTime: q.OptionalTime.clone(db),
		Question:     q.Question.clone(db),
		Remark:       q.Remark.clone(db),
		Score:        q.Score.clone(db),
		Setting:      q.Setting.clone(db),
		Standard:     q.Standard.clone(db),
	}
}

type queryCtx struct {
	Admin        adminDo
	Admit        admitDo
	Answer       answerDo
	Applicant    applicantDo
	Intent       intentDo
	OptionalTime optionalTimeDo
	Question     questionDo
	Remark       remarkDo
	Score        scoreDo
	Setting      settingDo
	Standard     standardDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:        *q.Admin.WithContext(ctx),
		Admit:        *q.Admit.WithContext(ctx),
		Answer:       *q.Answer.WithContext(ctx),
		Applicant:    *q.Applicant.WithContext(ctx),
		Intent:       *q.Intent.WithContext(ctx),
		OptionalTime: *q.OptionalTime.WithContext(ctx),
		Question:     *q.Question.WithContext(ctx),
		Remark:       *q.Remark.WithContext(ctx),
		Score:        *q.Score.WithContext(ctx),
		Setting:      *q.Setting.WithContext(ctx),
		Standard:     *q.Standard.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
