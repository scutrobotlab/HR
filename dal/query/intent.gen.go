// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/scutrobotlab/HR/dal/model"
)

func newIntent(db *gorm.DB) intent {
	_intent := intent{}

	_intent.intentDo.UseDB(db)
	_intent.intentDo.UseModel(&model.Intent{})

	tableName := _intent.intentDo.TableName()
	_intent.ALL = field.NewField(tableName, "*")
	_intent.ID = field.NewUint(tableName, "id")
	_intent.CreatedAt = field.NewTime(tableName, "created_at")
	_intent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_intent.DeletedAt = field.NewField(tableName, "deleted_at")
	_intent.ApplicantID = field.NewUint(tableName, "applicant_id")
	_intent.Group = field.NewString(tableName, "group")
	_intent.IntentRank = field.NewInt16(tableName, "intent_rank")
	_intent.OptionalTimeID = field.NewUint(tableName, "optional_time_id")
	_intent.Applicant = intentApplicant{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Applicant", "model.Applicant"),
		Intents: struct {
			field.RelationField
			Applicant struct {
				field.RelationField
			}
			OptionalTime struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Applicant.Intents", "model.Intent"),
			Applicant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Applicant.Intents.Applicant", "model.Applicant"),
			},
			OptionalTime: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Applicant.Intents.OptionalTime", "model.OptionalTime"),
			},
		},
	}

	_intent.OptionalTime = intentOptionalTime{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OptionalTime", "model.OptionalTime"),
	}

	_intent.fillFieldMap()

	return _intent
}

type intent struct {
	intentDo intentDo

	ALL            field.Field
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	ApplicantID    field.Uint
	Group          field.String
	IntentRank     field.Int16
	OptionalTimeID field.Uint
	Applicant      intentApplicant

	OptionalTime intentOptionalTime

	fieldMap map[string]field.Expr
}

func (i intent) Table(newTableName string) *intent {
	i.intentDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i intent) As(alias string) *intent {
	i.intentDo.DO = *(i.intentDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *intent) updateTableName(table string) *intent {
	i.ALL = field.NewField(table, "*")
	i.ID = field.NewUint(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.ApplicantID = field.NewUint(table, "applicant_id")
	i.Group = field.NewString(table, "group")
	i.IntentRank = field.NewInt16(table, "intent_rank")
	i.OptionalTimeID = field.NewUint(table, "optional_time_id")

	i.fillFieldMap()

	return i
}

func (i *intent) WithContext(ctx context.Context) *intentDo { return i.intentDo.WithContext(ctx) }

func (i intent) TableName() string { return i.intentDo.TableName() }

func (i intent) Alias() string { return i.intentDo.Alias() }

func (i *intent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *intent) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 10)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["applicant_id"] = i.ApplicantID
	i.fieldMap["group"] = i.Group
	i.fieldMap["intent_rank"] = i.IntentRank
	i.fieldMap["optional_time_id"] = i.OptionalTimeID

}

func (i intent) clone(db *gorm.DB) intent {
	i.intentDo.ReplaceDB(db)
	return i
}

type intentApplicant struct {
	db *gorm.DB

	field.RelationField

	Intents struct {
		field.RelationField
		Applicant struct {
			field.RelationField
		}
		OptionalTime struct {
			field.RelationField
		}
	}
}

func (a intentApplicant) Where(conds ...field.Expr) *intentApplicant {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a intentApplicant) WithContext(ctx context.Context) *intentApplicant {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a intentApplicant) Model(m *model.Intent) *intentApplicantTx {
	return &intentApplicantTx{a.db.Model(m).Association(a.Name())}
}

type intentApplicantTx struct{ tx *gorm.Association }

func (a intentApplicantTx) Find() (result *model.Applicant, err error) {
	return result, a.tx.Find(&result)
}

func (a intentApplicantTx) Append(values ...*model.Applicant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a intentApplicantTx) Replace(values ...*model.Applicant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a intentApplicantTx) Delete(values ...*model.Applicant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a intentApplicantTx) Clear() error {
	return a.tx.Clear()
}

func (a intentApplicantTx) Count() int64 {
	return a.tx.Count()
}

type intentOptionalTime struct {
	db *gorm.DB

	field.RelationField
}

func (a intentOptionalTime) Where(conds ...field.Expr) *intentOptionalTime {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a intentOptionalTime) WithContext(ctx context.Context) *intentOptionalTime {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a intentOptionalTime) Model(m *model.Intent) *intentOptionalTimeTx {
	return &intentOptionalTimeTx{a.db.Model(m).Association(a.Name())}
}

type intentOptionalTimeTx struct{ tx *gorm.Association }

func (a intentOptionalTimeTx) Find() (result *model.OptionalTime, err error) {
	return result, a.tx.Find(&result)
}

func (a intentOptionalTimeTx) Append(values ...*model.OptionalTime) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a intentOptionalTimeTx) Replace(values ...*model.OptionalTime) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a intentOptionalTimeTx) Delete(values ...*model.OptionalTime) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a intentOptionalTimeTx) Clear() error {
	return a.tx.Clear()
}

func (a intentOptionalTimeTx) Count() int64 {
	return a.tx.Count()
}

type intentDo struct{ gen.DO }

func (i intentDo) Debug() *intentDo {
	return i.withDO(i.DO.Debug())
}

func (i intentDo) WithContext(ctx context.Context) *intentDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i intentDo) Clauses(conds ...clause.Expression) *intentDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i intentDo) Returning(value interface{}, columns ...string) *intentDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i intentDo) Not(conds ...gen.Condition) *intentDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i intentDo) Or(conds ...gen.Condition) *intentDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i intentDo) Select(conds ...field.Expr) *intentDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i intentDo) Where(conds ...gen.Condition) *intentDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i intentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *intentDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i intentDo) Order(conds ...field.Expr) *intentDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i intentDo) Distinct(cols ...field.Expr) *intentDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i intentDo) Omit(cols ...field.Expr) *intentDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i intentDo) Join(table schema.Tabler, on ...field.Expr) *intentDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i intentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *intentDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i intentDo) RightJoin(table schema.Tabler, on ...field.Expr) *intentDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i intentDo) Group(cols ...field.Expr) *intentDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i intentDo) Having(conds ...gen.Condition) *intentDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i intentDo) Limit(limit int) *intentDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i intentDo) Offset(offset int) *intentDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i intentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *intentDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i intentDo) Unscoped() *intentDo {
	return i.withDO(i.DO.Unscoped())
}

func (i intentDo) Create(values ...*model.Intent) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i intentDo) CreateInBatches(values []*model.Intent, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i intentDo) Save(values ...*model.Intent) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i intentDo) First() (*model.Intent, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) Take() (*model.Intent, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) Last() (*model.Intent, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) Find() ([]*model.Intent, error) {
	result, err := i.DO.Find()
	return result.([]*model.Intent), err
}

func (i intentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Intent, err error) {
	buf := make([]*model.Intent, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i intentDo) FindInBatches(result *[]*model.Intent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i intentDo) Attrs(attrs ...field.AssignExpr) *intentDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i intentDo) Assign(attrs ...field.AssignExpr) *intentDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i intentDo) Joins(fields ...field.RelationField) *intentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i intentDo) Preload(fields ...field.RelationField) *intentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i intentDo) FirstOrInit() (*model.Intent, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) FirstOrCreate() (*model.Intent, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) FindByPage(offset int, limit int) (result []*model.Intent, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i intentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i *intentDo) withDO(do gen.Dao) *intentDo {
	i.DO = *do.(*gen.DO)
	return i
}
