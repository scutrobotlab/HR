// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/scutrobotlab/HR/dal/model"
)

func newAdmit(db *gorm.DB) admit {
	_admit := admit{}

	_admit.admitDo.UseDB(db)
	_admit.admitDo.UseModel(&model.Admit{})

	tableName := _admit.admitDo.TableName()
	_admit.ALL = field.NewField(tableName, "*")
	_admit.ApplicantID = field.NewInt32(tableName, "applicant_id")
	_admit.GroupID = field.NewInt32(tableName, "group_id")
	_admit.AdminID = field.NewInt32(tableName, "admin_id")
	_admit.CreatedAt = field.NewTime(tableName, "created_at")

	_admit.fillFieldMap()

	return _admit
}

type admit struct {
	admitDo admitDo

	ALL         field.Field
	ApplicantID field.Int32
	GroupID     field.Int32
	AdminID     field.Int32
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (a admit) Table(newTableName string) *admit {
	a.admitDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a admit) As(alias string) *admit {
	a.admitDo.DO = *(a.admitDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *admit) updateTableName(table string) *admit {
	a.ALL = field.NewField(table, "*")
	a.ApplicantID = field.NewInt32(table, "applicant_id")
	a.GroupID = field.NewInt32(table, "group_id")
	a.AdminID = field.NewInt32(table, "admin_id")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *admit) WithContext(ctx context.Context) *admitDo { return a.admitDo.WithContext(ctx) }

func (a admit) TableName() string { return a.admitDo.TableName() }

func (a admit) Alias() string { return a.admitDo.Alias() }

func (a *admit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *admit) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["applicant_id"] = a.ApplicantID
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a admit) clone(db *gorm.DB) admit {
	a.admitDo.ReplaceDB(db)
	return a
}

type admitDo struct{ gen.DO }

func (a admitDo) Debug() *admitDo {
	return a.withDO(a.DO.Debug())
}

func (a admitDo) WithContext(ctx context.Context) *admitDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a admitDo) Clauses(conds ...clause.Expression) *admitDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a admitDo) Returning(value interface{}, columns ...string) *admitDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a admitDo) Not(conds ...gen.Condition) *admitDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a admitDo) Or(conds ...gen.Condition) *admitDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a admitDo) Select(conds ...field.Expr) *admitDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a admitDo) Where(conds ...gen.Condition) *admitDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a admitDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *admitDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a admitDo) Order(conds ...field.Expr) *admitDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a admitDo) Distinct(cols ...field.Expr) *admitDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a admitDo) Omit(cols ...field.Expr) *admitDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a admitDo) Join(table schema.Tabler, on ...field.Expr) *admitDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a admitDo) LeftJoin(table schema.Tabler, on ...field.Expr) *admitDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a admitDo) RightJoin(table schema.Tabler, on ...field.Expr) *admitDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a admitDo) Group(cols ...field.Expr) *admitDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a admitDo) Having(conds ...gen.Condition) *admitDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a admitDo) Limit(limit int) *admitDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a admitDo) Offset(offset int) *admitDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a admitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *admitDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a admitDo) Unscoped() *admitDo {
	return a.withDO(a.DO.Unscoped())
}

func (a admitDo) Create(values ...*model.Admit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a admitDo) CreateInBatches(values []*model.Admit, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a admitDo) Save(values ...*model.Admit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a admitDo) First() (*model.Admit, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) Take() (*model.Admit, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) Last() (*model.Admit, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) Find() ([]*model.Admit, error) {
	result, err := a.DO.Find()
	return result.([]*model.Admit), err
}

func (a admitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Admit, err error) {
	buf := make([]*model.Admit, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a admitDo) FindInBatches(result *[]*model.Admit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a admitDo) Attrs(attrs ...field.AssignExpr) *admitDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a admitDo) Assign(attrs ...field.AssignExpr) *admitDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a admitDo) Joins(fields ...field.RelationField) *admitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a admitDo) Preload(fields ...field.RelationField) *admitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a admitDo) FirstOrInit() (*model.Admit, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) FirstOrCreate() (*model.Admit, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) FindByPage(offset int, limit int) (result []*model.Admit, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a admitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *admitDo) withDO(do gen.Dao) *admitDo {
	a.DO = *do.(*gen.DO)
	return a
}
