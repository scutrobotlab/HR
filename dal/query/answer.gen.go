// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/scutrobotlab/HR/dal/model"
)

func newAnswer(db *gorm.DB) answer {
	_answer := answer{}

	_answer.answerDo.UseDB(db)
	_answer.answerDo.UseModel(&model.Answer{})

	tableName := _answer.answerDo.TableName()
	_answer.ALL = field.NewField(tableName, "*")
	_answer.ApplicantID = field.NewUint(tableName, "applicant_id")
	_answer.QuestionID = field.NewUint(tableName, "question_id")
	_answer.TheAnswer = field.NewBool(tableName, "the_answer")
	_answer.Applicant = answerApplicant{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Applicant", "model.Applicant"),
		Intents: struct {
			field.RelationField
			Applicant struct {
				field.RelationField
			}
			OptionalTime struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Applicant.Intents", "model.Intent"),
			Applicant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Applicant.Intents.Applicant", "model.Applicant"),
			},
			OptionalTime: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Applicant.Intents.OptionalTime", "model.OptionalTime"),
			},
		},
		Answers: struct {
			field.RelationField
			Applicant struct {
				field.RelationField
			}
			Question struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Applicant.Answers", "model.Answer"),
			Applicant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Applicant.Answers.Applicant", "model.Applicant"),
			},
			Question: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Applicant.Answers.Question", "model.Question"),
			},
		},
	}

	_answer.Question = answerQuestion{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Question", "model.Question"),
	}

	_answer.fillFieldMap()

	return _answer
}

type answer struct {
	answerDo answerDo

	ALL         field.Field
	ApplicantID field.Uint
	QuestionID  field.Uint
	TheAnswer   field.Bool
	Applicant   answerApplicant

	Question answerQuestion

	fieldMap map[string]field.Expr
}

func (a answer) Table(newTableName string) *answer {
	a.answerDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a answer) As(alias string) *answer {
	a.answerDo.DO = *(a.answerDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *answer) updateTableName(table string) *answer {
	a.ALL = field.NewField(table, "*")
	a.ApplicantID = field.NewUint(table, "applicant_id")
	a.QuestionID = field.NewUint(table, "question_id")
	a.TheAnswer = field.NewBool(table, "the_answer")

	a.fillFieldMap()

	return a
}

func (a *answer) WithContext(ctx context.Context) *answerDo { return a.answerDo.WithContext(ctx) }

func (a answer) TableName() string { return a.answerDo.TableName() }

func (a answer) Alias() string { return a.answerDo.Alias() }

func (a *answer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *answer) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["applicant_id"] = a.ApplicantID
	a.fieldMap["question_id"] = a.QuestionID
	a.fieldMap["the_answer"] = a.TheAnswer

}

func (a answer) clone(db *gorm.DB) answer {
	a.answerDo.ReplaceDB(db)
	return a
}

type answerApplicant struct {
	db *gorm.DB

	field.RelationField

	Intents struct {
		field.RelationField
		Applicant struct {
			field.RelationField
		}
		OptionalTime struct {
			field.RelationField
		}
	}
	Answers struct {
		field.RelationField
		Applicant struct {
			field.RelationField
		}
		Question struct {
			field.RelationField
		}
	}
}

func (a answerApplicant) Where(conds ...field.Expr) *answerApplicant {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a answerApplicant) WithContext(ctx context.Context) *answerApplicant {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a answerApplicant) Model(m *model.Answer) *answerApplicantTx {
	return &answerApplicantTx{a.db.Model(m).Association(a.Name())}
}

type answerApplicantTx struct{ tx *gorm.Association }

func (a answerApplicantTx) Find() (result *model.Applicant, err error) {
	return result, a.tx.Find(&result)
}

func (a answerApplicantTx) Append(values ...*model.Applicant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a answerApplicantTx) Replace(values ...*model.Applicant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a answerApplicantTx) Delete(values ...*model.Applicant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a answerApplicantTx) Clear() error {
	return a.tx.Clear()
}

func (a answerApplicantTx) Count() int64 {
	return a.tx.Count()
}

type answerQuestion struct {
	db *gorm.DB

	field.RelationField
}

func (a answerQuestion) Where(conds ...field.Expr) *answerQuestion {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a answerQuestion) WithContext(ctx context.Context) *answerQuestion {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a answerQuestion) Model(m *model.Answer) *answerQuestionTx {
	return &answerQuestionTx{a.db.Model(m).Association(a.Name())}
}

type answerQuestionTx struct{ tx *gorm.Association }

func (a answerQuestionTx) Find() (result *model.Question, err error) {
	return result, a.tx.Find(&result)
}

func (a answerQuestionTx) Append(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a answerQuestionTx) Replace(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a answerQuestionTx) Delete(values ...*model.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a answerQuestionTx) Clear() error {
	return a.tx.Clear()
}

func (a answerQuestionTx) Count() int64 {
	return a.tx.Count()
}

type answerDo struct{ gen.DO }

func (a answerDo) Debug() *answerDo {
	return a.withDO(a.DO.Debug())
}

func (a answerDo) WithContext(ctx context.Context) *answerDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a answerDo) Clauses(conds ...clause.Expression) *answerDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a answerDo) Returning(value interface{}, columns ...string) *answerDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a answerDo) Not(conds ...gen.Condition) *answerDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a answerDo) Or(conds ...gen.Condition) *answerDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a answerDo) Select(conds ...field.Expr) *answerDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a answerDo) Where(conds ...gen.Condition) *answerDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a answerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *answerDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a answerDo) Order(conds ...field.Expr) *answerDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a answerDo) Distinct(cols ...field.Expr) *answerDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a answerDo) Omit(cols ...field.Expr) *answerDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a answerDo) Join(table schema.Tabler, on ...field.Expr) *answerDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a answerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *answerDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a answerDo) RightJoin(table schema.Tabler, on ...field.Expr) *answerDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a answerDo) Group(cols ...field.Expr) *answerDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a answerDo) Having(conds ...gen.Condition) *answerDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a answerDo) Limit(limit int) *answerDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a answerDo) Offset(offset int) *answerDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a answerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *answerDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a answerDo) Unscoped() *answerDo {
	return a.withDO(a.DO.Unscoped())
}

func (a answerDo) Create(values ...*model.Answer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a answerDo) CreateInBatches(values []*model.Answer, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a answerDo) Save(values ...*model.Answer) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a answerDo) First() (*model.Answer, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) Take() (*model.Answer, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) Last() (*model.Answer, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) Find() ([]*model.Answer, error) {
	result, err := a.DO.Find()
	return result.([]*model.Answer), err
}

func (a answerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Answer, err error) {
	buf := make([]*model.Answer, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a answerDo) FindInBatches(result *[]*model.Answer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a answerDo) Attrs(attrs ...field.AssignExpr) *answerDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a answerDo) Assign(attrs ...field.AssignExpr) *answerDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a answerDo) Joins(fields ...field.RelationField) *answerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a answerDo) Preload(fields ...field.RelationField) *answerDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a answerDo) FirstOrInit() (*model.Answer, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) FirstOrCreate() (*model.Answer, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Answer), nil
	}
}

func (a answerDo) FindByPage(offset int, limit int) (result []*model.Answer, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a answerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a *answerDo) withDO(do gen.Dao) *answerDo {
	a.DO = *do.(*gen.DO)
	return a
}
